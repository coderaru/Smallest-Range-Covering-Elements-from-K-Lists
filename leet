#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

class Solution {
public:
    vector<int> smallestRange(vector<vector<int>>& nums) {
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> minHeap;

        int currentMax = INT_MIN;  
        int start = 0, end = INT_MAX;       

        for (int i = 0; i < nums.size(); i++) {
            minHeap.push({nums[i][0], i, 0});
            currentMax = max(currentMax, nums[i][0]);  
        }

        while (true) {
            vector<int> current = minHeap.top();
            minHeap.pop();

            int currentMin = current[0];
            int listIndex = current[1];
            int elementIndex = current[2];

            if (currentMax - currentMin < end - start) {
                start = currentMin;
                end = currentMax;
            }

            if (elementIndex + 1 < nums[listIndex].size()) {
                int nextValue = nums[listIndex][elementIndex + 1];
                minHeap.push({nextValue, listIndex, elementIndex + 1});
                currentMax = max(currentMax, nextValue); 
            } else {
                break;
            }
        }

        return {start, end};
    }
};

